% Copyright (c) 2017, Christopher Mark Gore,
% Soli Deo Gloria,
% All rights reserved.
%
% 2317 South River Road, Saint Charles, Missouri 63303 USA.
% Web: http://cgore.com
% Email: cgore@cgore.com
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
%     * Redistributions of source code must retain the above copyright
%       notice, this list of conditions and the following disclaimer.
%
%     * Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in the
%       documentation and/or other materials provided with the distribution.
%
%     * Neither the name of Christopher Mark Gore nor the names of other
%       contributors may be used to endorse or promote products derived from
%       this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.

\documentclass{seminar}

\usepackage{fixltx2e} % Bugfixes for LaTeX 2e
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{dirtree}
\usepackage{graphicx}
\usepackage[usenames,dvipsnames]{xcolor}
\usepackage{librebaskerville} % Baskerville font
\usepackage{amsfonts}
\usepackage{listings}
\usepackage[dvips]{pstricks}
\usepackage{relsize}
\usepackage{textcomp}
\usepackage[normalem]{ulem}
\usepackage{wasysym}
\usepackage{dirtree}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{pifont}
\usepackage{tikz}

\usetikzlibrary{chains,matrix,positioning,shapes,shadows,arrows,arrows.meta}

\tikzstyle{arrow} = [thick,->,>=stealth]
\tikzstyle{roundangle} = [rectangle, rounded corners, text centered, draw=black, fill=blue!10]
\tikzstyle{cons} = [
  rectangle split,
  rectangle split horizontal,
  rectangle split parts = 2,
  rounded corners,
  draw=black,
  fill=white,
]
\newcommand{\carcdr}[1]{\node (#1) [cons] {car \nodepart{second} cdr};}
\newcommand{\dottedcons}[1]{\node (#1) [cons] {. \nodepart{second} .};}
\newcommand{\dottedconsX}[2]{\node (#1) [cons,#2] {. \nodepart{second} .};}
\newcommand{\dottedconsB}[2]{\dottedconsX{#1}{below of=#2}}
\newcommand{\dottedconsLB}[2]{\dottedconsX{#1}{below left of = #2}}
\newcommand{\dottedconsRB}[2]{\dottedconsX{#1}{below right of = #2}}
\newcommand{\roundangle}[2]{\node (#1) [roundangle] {#2};}
\newcommand{\roundangleX}[3]{\node (#1) [roundangle,#3] {#2};}
\newcommand{\carline}[2]{\draw [arrow] (#1.one south) -- (#2);}
\newcommand{\carlineX}[3]{\draw [arrow,#3] (#1.one south) -- (#2);}
\newcommand{\cdrline}[2]{\draw [arrow] (#1.two south) -- (#2);}

\usepackage{semcolor,slidesec}
\input{seminar.bug}
\input{seminar.bg2}
% \input{seminar.bg3} % TODO: why is this missing on OSX?

\definecolor{fillcolor}{rgb}{0.9,0.95,1.0}
\definecolor{linecolor}{rgb}{0.8,0.85,0.9}
\slideframe[\psset{fillcolor=fillcolor,linecolor=linecolor}]{scshadow}

\newcommand{\hc}{Blue}
\newcommand{\h}[1]{\slideheading{\textcolor{\hc}{#1}}}
\newcommand{\tq}[1]{\textcolor{Green}{\textbf{#1}}}
\newcommand{\tbd}[1]{\textcolor{Blue}{\textit{#1}}}
\newcommand{\TODO}{{\Huge \textcolor{Red}{\textbf{{TO DO}}}}}

\newcommand{\dtdir}[1]{%
  \includegraphics[height=0.75em,keepaspectratio=true]{manila-folder-bluebg.eps}%
  \textcolor{Blue}{#1}}

\definecolor{commentcolor}{rgb}{0.1,0.1,0.8}
\definecolor{identifiercolor}{rgb}{0.3,0.3,0.3}
\definecolor{keywordcolor}{rgb}{0.1,0.5,0.1}
\definecolor{cexcolor}{rgb}{0.25,0.25,0.4}
\lstset{
  basicstyle=\ttfamily,
  language=Lisp,
  escapeinside={\%*}{*)},
  commentstyle=\itshape\color{commentcolor},
  identifierstyle=\color{identifiercolor},
  keywordstyle=\color{keywordcolor},
  upquote=true,
  numbers=left,
  numberstyle=\tiny\color{commentcolor},
  numbersep=5pt
}
\newcommand{\cex}[1]{\textcolor{cexcolor}{\textit{#1}}}

\newcommand{\shell}[1]{\texttt{\textbf{{\textcolor{Blue} \$}} #1}}

\newcommand{\xmark}{\textcolor{Red}{\ding{55}}}
\newcommand{\cmark}{\textcolor{Green}{\ding{51}}}

\newcommand{\SlideSection}[1]
{
  \begin{center}
    \textcolor{\hc}{\textbf{\emph{\Huge{#1}}}}
  \end{center}
}


\newcommand{\fullSlideImage}[1]{
  \begin{center}
    \includegraphics[width=4in,height=2.25in,keepaspectratio=true]{#1}
  \end{center}
}

\newcommand{\halfSlideImage}[1]{
  \includegraphics[width=2in,height=2.25in,keepaspectratio=true]{#1}
}

\newcommand{\halfSlideImageCentered}[1]{
  \begin{center}
    \halfSlideImage{#1}
  \end{center}
}

\newcommand{\rightSideImageName}{you-must-supply-the-image-name.eps}
\newenvironment{rightSideImage}[1]
{
  \renewcommand{\rightSideImageName}{#1}
  \begin{tabular}{lr}
    \begin{minipage}[b]{2in}
}
{
    \end{minipage}
    &
    \halfSlideImage{\rightSideImageName}
  \end{tabular}
}

\newcommand{\leftSideImageName}{you-must-supply-the-image-name.eps}
\newenvironment{leftSideImage}[1]
{
  \renewcommand{\leftSideImageName}{#1}
  \begin{tabular}{lr}
    \halfSlideImage{\leftSideImageName}
    &
    \begin{minipage}[b]{2in}
      \raggedright
}
{
    \end{minipage}
  \end{tabular}
}

\def\dout{\bgroup
 \markoverwith{\lower-0.2ex\hbox
 {\kern-.03em\vbox{\hrule width.2em\kern0.45ex\hrule}\kern-.03em}}%
 \ULon}
\MakeRobust\dout

\newpagestyle{cgore}{}{Chris Gore\hfil\thepage\hfil\texttt{cgore.com}}
\pagestyle{cgore}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\title{\psshadowbox{Powderkeg}}
\author{Christopher Mark Gore\\
  \texttt{cgore.com}}
\date{Tuesday, March 21, {\smaller AD} 2017} % textsc doesn't seem to work for Baskerville.

\begin{document}

\raggedslides[0mm]


\begin{slide}
  \color{\hc}

  \begin{center}
    \includegraphics[width=3in]{STLClojure.eps}
  \end{center}

  \maketitle

  \color{Black}
\end{slide}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{slide}
  \h{We write Clojure at The Climate Corporation,\\and we're hiring!  Come work
    with us!}
  \fullSlideImage{climate-logo-bluebg.eps}
\end{slide}



\begin{slide}
  \h{Especially now that Bayer is buying us!}
  \fullSlideImage{Bayer-logo-bluebg.eps}
\end{slide}


\begin{slide}
  \h{It's a pretty cool place to work, we've even got a giant globe to play with.}

  \fullSlideImage{climate-globe.eps}
\end{slide}


\begin{slide}
  \h{Clojure is a lisp.}

  \fullSlideImage{other-lisp.eps}
\end{slide}


\begin{slide}
  \h{Clojure is a lisp on the JVM.}

  \fullSlideImage{java-yoda.eps}
\end{slide}


\begin{slide}
  \h{Scala is also on the JVM.}

  \fullSlideImage{java-vs-scala-bluebg.eps}
\end{slide}


\begin{slide}
  \h{But Scala isn't a lisp.}

  \fullSlideImage{mccarthy.eps}
\end{slide}


\begin{slide}
  \h{Apache Spark is really cool, but it's in Scala.}

  \fullSlideImage{spark-bluebg.eps}
\end{slide}


\begin{slide}
  \h{Apache Spark is an open source cluster computing framework.}

  \begin{itemize}
  \item Based on the RDD, resilient distributed dataset.
  \item An RDD is basically a distributed read-only multiset.
  \item RDDs allow for the power of MapReduce but with a lot more flexibility.
  \item RDDs can be treated as shared memory.
  \item This allows for iterative algorithms, not just map and then reduce operations.
  \end{itemize}
\end{slide}


\begin{slide}
  \h{What's a Clojurian to do?}

  \begin{itemize}
  \item Use Scala?  Nope.
  \item Here at Climate, we made \texttt{clj-spark} well before I came to work
    here, which was a good start.
  \item This eventually became Flambo, which is pretty good, but doesn't
    exactly feel like Clojure.
  \end{itemize}
\end{slide}


\begin{slide}
  \h{Let's make another library!}

  \begin{itemize}
  \item Igor Ges and Christophe Grand introduced a new library called
    \textit{Powderkeg} to work with Apache Spark in Clojure.
  \item It looks like normal Clojure code, thanks to transducers!
  \item But \textellipsis it's still really early alpha.
  \end{itemize}
\end{slide}


\begin{slide}
  \h{It looks almost like normal Clojure.}

\begin{lstlisting}
;; 'normal' Clojure
(into [] (map #(* % %))
              [1 2 3 4 5])

;; Flambo
(-> (f/parallelize sc [1 2 3 4 5])
    (f/map (f/fn [x] (* x x)))
    f/collect)

;; Powderkeg
(into [] (keg/rdd [1 2 3 4 5]
                  (map #(* % %))))    
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{So what exactly do you do with a Spark cluster?}

  \begin{itemize}
  \item Make a big list of stuff, and RDD.
  \item Map on that RDD \textellipsis
  \item Filter down that RDD \textellipsis
  \item Reduce on that RDD \textellipsis
  \item \textellipsis
  \end{itemize}

  Until you have the final result of your computation.  But, all this mapping,
  reducing, and filtering has occurred on multiple machines, not just one
  machine.
\end{slide}


\begin{slide}
  \h{Why we care at Climate\\
    \textit{(besides it just being cool.)}}

  \begin{itemize}
  \item Most of our imagery generation is quite amenable to this sort of
    parallellization.
  \item We currently have to run on somewhat large (and expensive) instances
    because we currently operate on a per-field basis.
  \item The instance type required for a 100-acre field is a lot cheaper than
    what we need to calculate on a 3,000-acre field.
  \item But if we can span across multiple instances per-field, then we can use
    smaller and cheaper instances, just more of them.
  \end{itemize}
\end{slide}


\begin{slide}
  \h{Why \textit{you} care at \textit{YourMegaCorp, Inc.}\\
    \textit{(besides it just being cool.)}}

  \fullSlideImage{big-data.eps}
\end{slide}


\begin{slide}
  \h{Actually, there's various limits to the sizes of things, so
    \textit{biggish} data.}

  \fullSlideImage{spoon-bluebg.eps}
\end{slide}


\begin{slide}
  \h{Pictures of corn \textellipsis \textit{from space.}}

  \fullSlideImage{veg-map.eps}
\end{slide}


\begin{slide}
  \h{Spark SQL -- there's work in progress to move this over.}

  \texttt{https://github.com/HCADatalab/powderkeg/tree/sql}

\begin{lstlisting}[language=Java]
// Select customer name column
dfCustomers.select("name").show()
// Select customer name and city columns
dfCustomers.select("name", "city").show()
// Select a customer by id
dfCustomers.filter(
  dfCustomers("customer_id").equalTo(500)
).show()
// Count the customers by zip code
dfCustomers.groupBy("zip_code").count().show()
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Spark Streaming -- eventually, I don't think there's any work on that yet.}

  You can implement a batch-oriented lambda architecture in this, which is
  something that I need for Thinking Bicycle.

  \fullSlideImage{logo-v3.eps}
\end{slide}


\begin{slide}
  \h{MLlib: Machine learning is cool, and there's a library for that on top of
    Spark.  I really want it, so I'll probably make it.}

  \fullSlideImage{terminator.eps}
\end{slide}


\begin{slide}
  \h{MLlib's SVMs \textit{(support vector machines)} more specifically.  Because
    clouds suck when you've only got civilian satellites.}

  \fullSlideImage{field-clouds.eps}
\end{slide}


\begin{slide}
  \h{GraphX, a graph processing framework on top of Apache Spark, also looks
    pretty interesting and useful.}

  \fullSlideImage{graphx-bluebg.eps}
\end{slide}


\begin{slide}
  \h{RDDs have \textit{actions} which return values (1/2).}

  \begin{description}
  \item[reduce] aggregate the elements with some function \textit{(think
    summation and the \texttt{+} function)}
  \item[collect] return a normal array
  \item[count] how many items in the RDD
  \item[first] the first item in the RDD
  \item[take] return a normal array of $n$ items
  \item[takeSample] random sampling of $n$ elements
  \item[takeOrdered] first $n$ elements based on an ordering
  \end{description}
\end{slide}

\begin{slide}
  \h{RDDs have \textit{actions} which return values (2/2).}

  \begin{description}
  \item[saveAsTextFile] write out a simple text file
  \item[saveAsSequenceFile] write out a Hadoop SequenceFile
  \item[saveAsObjectFile] write out a simple serialized file
  \item[countByKey] for $(k,v)$ RDDs, return $(k,n)$ of counts
  \item[foreach] run a function over the entire RDD for side effects
  \end{description}
\end{slide}


\begin{slide}
  \h{RDDs have \textit{transformations} which return new RDDs (1/3).}

  \begin{description}
  \item[map] new RDD by mapping $f$
  \item[filter] new RDD filtered for $f$ is true
  \item[flatMap] non-bijective map (non-1:1)
  \item[mapPartitions] like map, but running separately on each partition (block) of the RDD
  \item[mapPartitionsWithIndex] like \textit{mapPartitions}, but also with an integer index of the partition
  \item[sample] random sample of the RDD
  \end{description}
\end{slide}

\begin{slide}
  \h{RDDs have \textit{transformations} which return new RDDs (2/3).}

  \begin{description}
  \item[union] union of two RDDs
  \item[intersection] intersection of two RDDs
  \item[distinct] the distinct (unique) elements as a new RDD
  \item[groupByKey] $(k,v)$ to $(k, \{v_1, v_2, \ldots\})$
  \item[reduceByKey] like reduce, but on a per-key basis
  \item[aggregateByKey] per-key merge of the RDD
  \item[sortByKey] an RDD sorted by the keys
  \end{description}
\end{slide}

\begin{slide}
  \h{RDDs have \textit{transformations} which return new RDDs (3/3).}

  \begin{description}
  \item[join] $(k,v)$ and $(k,w)$ become $(k,(v,w))$
  \item[cogroup] groups two RDDs together on their shared keys
  \item[cartesian] this is the reason why some people shouldn't be allowed near databases
  \item[pipe] pipe through a shell command
  \item[coalesce] reduce the number of partitions (blocks)
  \item[repartition] set the number of partitions (blocks)
  \item[repartionAndSortWithinPartitions] more efficient than a repartition and then sort
  \end{description}
\end{slide}


\begin{slide}
  \SlideSection{Questions?}
\end{slide}

\end{document}
